/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.todolist.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.todolist.model.Todolist;
import com.liferay.todolist.model.TodolistModel;
import com.liferay.todolist.model.TodolistSoap;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Todolist service. Represents a row in the &quot;todo_Todolist&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TodolistModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TodolistImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TodolistImpl
 * @generated
 */
@JSON(strict = true)
public class TodolistModelImpl
	extends BaseModelImpl<Todolist> implements TodolistModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a todolist model instance should use the <code>Todolist</code> interface instead.
	 */
	public static final String TABLE_NAME = "todo_Todolist";

	public static final Object[][] TABLE_COLUMNS = {
		{"taskId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"Id", Types.BIGINT}, {"createdby", Types.BIGINT},
		{"modifiedby", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"enrollmentNo", Types.VARCHAR},
		{"firstName", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"tags", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("taskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedby", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("enrollmentNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tags", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table todo_Todolist (taskId LONG not null primary key,groupId LONG,Id LONG,createdby LONG,modifiedby VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,enrollmentNo VARCHAR(75) null,firstName VARCHAR(75) null,description VARCHAR(75) null,status VARCHAR(75) null,tags VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table todo_Todolist";

	public static final String ORDER_BY_JPQL = " ORDER BY todolist.taskId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY todo_Todolist.taskId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Todolist toModel(TodolistSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Todolist model = new TodolistImpl();

		model.setTaskId(soapModel.getTaskId());
		model.setGroupId(soapModel.getGroupId());
		model.setId(soapModel.getId());
		model.setCreatedby(soapModel.getCreatedby());
		model.setModifiedby(soapModel.getModifiedby());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEnrollmentNo(soapModel.getEnrollmentNo());
		model.setFirstName(soapModel.getFirstName());
		model.setDescription(soapModel.getDescription());
		model.setStatus(soapModel.getStatus());
		model.setTags(soapModel.getTags());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Todolist> toModels(TodolistSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Todolist> models = new ArrayList<Todolist>(soapModels.length);

		for (TodolistSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TodolistModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _taskId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTaskId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _taskId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Todolist.class;
	}

	@Override
	public String getModelClassName() {
		return Todolist.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Todolist, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Todolist, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Todolist, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Todolist)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Todolist, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Todolist, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Todolist)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Todolist, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Todolist, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Todolist, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<Todolist, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Todolist, Object>>();

		attributeGetterFunctions.put("taskId", Todolist::getTaskId);
		attributeGetterFunctions.put("groupId", Todolist::getGroupId);
		attributeGetterFunctions.put("Id", Todolist::getId);
		attributeGetterFunctions.put("createdby", Todolist::getCreatedby);
		attributeGetterFunctions.put("modifiedby", Todolist::getModifiedby);
		attributeGetterFunctions.put("createDate", Todolist::getCreateDate);
		attributeGetterFunctions.put("modifiedDate", Todolist::getModifiedDate);
		attributeGetterFunctions.put("enrollmentNo", Todolist::getEnrollmentNo);
		attributeGetterFunctions.put("firstName", Todolist::getFirstName);
		attributeGetterFunctions.put("description", Todolist::getDescription);
		attributeGetterFunctions.put("status", Todolist::getStatus);
		attributeGetterFunctions.put("tags", Todolist::getTags);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<Todolist, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<Todolist, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Todolist, ?>>();

		attributeSetterBiConsumers.put(
			"taskId", (BiConsumer<Todolist, Long>)Todolist::setTaskId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Todolist, Long>)Todolist::setGroupId);
		attributeSetterBiConsumers.put(
			"Id", (BiConsumer<Todolist, Long>)Todolist::setId);
		attributeSetterBiConsumers.put(
			"createdby", (BiConsumer<Todolist, Long>)Todolist::setCreatedby);
		attributeSetterBiConsumers.put(
			"modifiedby",
			(BiConsumer<Todolist, String>)Todolist::setModifiedby);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Todolist, Date>)Todolist::setCreateDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Todolist, Date>)Todolist::setModifiedDate);
		attributeSetterBiConsumers.put(
			"enrollmentNo",
			(BiConsumer<Todolist, String>)Todolist::setEnrollmentNo);
		attributeSetterBiConsumers.put(
			"firstName", (BiConsumer<Todolist, String>)Todolist::setFirstName);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Todolist, String>)Todolist::setDescription);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Todolist, String>)Todolist::setStatus);
		attributeSetterBiConsumers.put(
			"tags", (BiConsumer<Todolist, String>)Todolist::setTags);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getTaskId() {
		return _taskId;
	}

	@Override
	public void setTaskId(long taskId) {
		_taskId = taskId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@JSON
	@Override
	public long getCreatedby() {
		return _createdby;
	}

	@Override
	public void setCreatedby(long createdby) {
		_createdby = createdby;
	}

	@JSON
	@Override
	public String getModifiedby() {
		if (_modifiedby == null) {
			return "";
		}
		else {
			return _modifiedby;
		}
	}

	@Override
	public void setModifiedby(String modifiedby) {
		_modifiedby = modifiedby;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEnrollmentNo() {
		if (_enrollmentNo == null) {
			return "";
		}
		else {
			return _enrollmentNo;
		}
	}

	@Override
	public void setEnrollmentNo(String enrollmentNo) {
		_enrollmentNo = enrollmentNo;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public String getTags() {
		if (_tags == null) {
			return "";
		}
		else {
			return _tags;
		}
	}

	@Override
	public void setTags(String tags) {
		_tags = tags;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Todolist.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Todolist toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Todolist>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TodolistImpl todolistImpl = new TodolistImpl();

		todolistImpl.setTaskId(getTaskId());
		todolistImpl.setGroupId(getGroupId());
		todolistImpl.setId(getId());
		todolistImpl.setCreatedby(getCreatedby());
		todolistImpl.setModifiedby(getModifiedby());
		todolistImpl.setCreateDate(getCreateDate());
		todolistImpl.setModifiedDate(getModifiedDate());
		todolistImpl.setEnrollmentNo(getEnrollmentNo());
		todolistImpl.setFirstName(getFirstName());
		todolistImpl.setDescription(getDescription());
		todolistImpl.setStatus(getStatus());
		todolistImpl.setTags(getTags());

		todolistImpl.resetOriginalValues();

		return todolistImpl;
	}

	@Override
	public int compareTo(Todolist todolist) {
		long primaryKey = todolist.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Todolist)) {
			return false;
		}

		Todolist todolist = (Todolist)object;

		long primaryKey = todolist.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
	}

	@Override
	public CacheModel<Todolist> toCacheModel() {
		TodolistCacheModel todolistCacheModel = new TodolistCacheModel();

		todolistCacheModel.taskId = getTaskId();

		todolistCacheModel.groupId = getGroupId();

		todolistCacheModel.Id = getId();

		todolistCacheModel.createdby = getCreatedby();

		todolistCacheModel.modifiedby = getModifiedby();

		String modifiedby = todolistCacheModel.modifiedby;

		if ((modifiedby != null) && (modifiedby.length() == 0)) {
			todolistCacheModel.modifiedby = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			todolistCacheModel.createDate = createDate.getTime();
		}
		else {
			todolistCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			todolistCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			todolistCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		todolistCacheModel.enrollmentNo = getEnrollmentNo();

		String enrollmentNo = todolistCacheModel.enrollmentNo;

		if ((enrollmentNo != null) && (enrollmentNo.length() == 0)) {
			todolistCacheModel.enrollmentNo = null;
		}

		todolistCacheModel.firstName = getFirstName();

		String firstName = todolistCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			todolistCacheModel.firstName = null;
		}

		todolistCacheModel.description = getDescription();

		String description = todolistCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			todolistCacheModel.description = null;
		}

		todolistCacheModel.status = getStatus();

		String status = todolistCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			todolistCacheModel.status = null;
		}

		todolistCacheModel.tags = getTags();

		String tags = todolistCacheModel.tags;

		if ((tags != null) && (tags.length() == 0)) {
			todolistCacheModel.tags = null;
		}

		return todolistCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Todolist, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Todolist, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Todolist, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Todolist)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Todolist, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Todolist, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Todolist, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Todolist)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Todolist>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Todolist.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _taskId;
	private long _groupId;
	private long _Id;
	private long _createdby;
	private String _modifiedby;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _enrollmentNo;
	private String _firstName;
	private String _description;
	private String _status;
	private String _tags;
	private Todolist _escapedModel;

}